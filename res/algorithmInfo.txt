bfs:Breadth-First Search:Breadth-First Search is a tree traversal algorithm. It starts at the root of the tree and explores all of the nodes at the present depth prior to moving onto the nodes at the next depth level. A queue data structure is usually used to keep track of child nodes which were encountered but not yet explored. BFS algorithms are used for finding the shortest path between two nodes in a graph, testing the bipartiteness of a graph, copying garbage collections, chess engines etc.
dfs:Depth-First Search:Depth-First Search is a tree/graph traversal algorithm. It starts at the root node (or some arbitrarily selected node) and explores as far as possible along each branch before backtracking. A stack data structure is usually used to keep track of the nodes discovered so far along a specified branch, which can help with the backtracking of the graph. DFS algorithms are used for finding connected components, finding bridges in graphs, solving puzzles with a single solution (such as mazes), generating mazes etc.
astar:A* Search:A* Search algorithm is a graph traversal and pathfinding algorithm widely used in Computer Science due to its completness, optimality, and optimal efficiency (however, one of its drawbacks is its space complexity). The A* algorithm can be seen as an extension to Dijkstra's pathfinding algorithm which achieves better performance by using heuristics to guide its search. As opposed to Dijkstra's algorithm, the A* algorithm only finds the shortest path from a specified source to a specified goal, rather than the shortest path-tree from a specified source to all possible goals. A* algorithms are used for the common pathfinding problem in applications such as video games.
bisearch:Bidirectional Search:Bidirectional Search is a graph search algorithm which finds the shortest path between a specified source node and a specified destination node (in a directed graph). It runs two simultaenous searches, one forward from the source node, and one backward from the destination node. In many cases this algorithm is faster than its widely known pathfinding counterparts. Similarly to the A* Search, Bidirectional Search can be guided by a heuristic estimate of the remaining goal to the goal or from the start.
dijkstra:Dijkstra`s Algorithm:Dijkstra`s Algorithm is an algorithm for finding the shortest paths between nodes in a (weighted) graph. Dijkstra`s algorithm finds the shortest path from a given source node to every other node, but it can also be used to find the shortest path to a specific destination node (as it does when running it here). The algorithm uses a min-priority queue data structure for selecting the shortest paths known so far. Despite its widespread usage, one drawback of Dijkstra`s algorithm is that it can't be used on graphs with negative edge weights - although that isn't a problem in our case, as all edges between cells are weighted equally here.
gbfs:Greedy Best-First Search:Greedy Best-First Search is part of the Best-First Search algorithms, which explore a graph by expanding the most promising node chosen according to a specific rule. Using a greedy algorithm, the first successor of the parent is expanded. After a successor is generated, the algorithm makes use of heuristics to insert the most promising node into a queue.
jps:Jump Point Search:Jump Point Search is an optimization to the A* search algorithm for uniform-cost grids (as it is in our case). It reduces symmetries in the search procedure by means of graph pruning. As a result, the algorithm can consider 'longer jumps' along straight, horizontal lines in the grid, rather than the small steps that A* takes. Jump Point preserves A*'s optimality, while potentially reducing its running time by an order of magnitude.